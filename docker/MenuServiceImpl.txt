package com.globant.trainingnewgen.service.impl;

import com.globant.trainingnewgen.model.entity.Product;
import com.globant.trainingnewgen.model.entity.ProductCategory;
import com.globant.trainingnewgen.repository.ProductRepository;
import com.globant.trainingnewgen.service.MenuService;
import lombok.RequiredArgsConstructor;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor

public class MenuServiceImpl implements MenuService {

    private final ProductRepository productRepository;
    private final static Logger LOGGER = LoggerFactory.getLogger(MenuServiceImpl.class);

    @Override
    public void generatePlainTextMenu(ByteArrayOutputStream outputStream) {
        List<Product> products = productRepository.findByAvailable(Boolean.TRUE);
        Map<ProductCategory, List<Product>> categorizedProducts = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));

        StringBuilder menu = new StringBuilder("Restaurante XYZ\n\n");

        for (Map.Entry<ProductCategory, List<Product>> entry : categorizedProducts.entrySet()) {
            menu.append(entry.getKey().name()).append("\n");
            for (Product product : entry.getValue()) {
                menu.append(product.getFantasyName()).append(" - $").append(product.getPrice()).append("\n");
            }
            menu.append("\n");
        }

        try {
            outputStream.write(menu.toString().getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void generatePdfMenu(ByteArrayOutputStream outputStream) {
        try (PDDocument document = new PDDocument()) {
            PDPage page = new PDPage();
            document.addPage(page);

            PDType1Font font = new PDType1Font(Standard14Fonts.FontName.HELVETICA);
            try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
                contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 20);
                contentStream.beginText();
                contentStream.newLineAtOffset(100, 700);
                contentStream.showText("Restaurante XYZ");
                contentStream.endText();

                List<Product> products = productRepository.findByAvailable(Boolean.TRUE);
                Map<ProductCategory, List<Product>> categorizedProducts = products.stream()
                        .collect(Collectors.groupingBy(Product::getCategory));

                int yPosition = 650;

                for (Map.Entry<ProductCategory, List<Product>> entry : categorizedProducts.entrySet()) {
                    contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 16);
                    contentStream.beginText();
                    contentStream.newLineAtOffset(100, yPosition);
                    contentStream.showText(entry.getKey().name());
                    contentStream.endText();
                    yPosition -= 20;

                    for (Product product : entry.getValue()) {
                        contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), 12);
                        contentStream.beginText();
                        contentStream.newLineAtOffset(120, yPosition);
                        contentStream.showText(product.getFantasyName() + " - $" + product.getPrice());
                        contentStream.endText();
                        yPosition -= 15;
                    }
                    yPosition -= 20;
                }
            }

            document.save(outputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void generateDocxMenu(ByteArrayOutputStream outputStream) {
        LOGGER.debug("Generating DOCX menu");
        try (XWPFDocument document = new XWPFDocument()) {
            XWPFParagraph title = document.createParagraph();
            XWPFRun run = title.createRun();
            run.setText("Restaurante XYZ");
            run.setBold(true);
            run.setFontSize(20);

            List<Product> products = productRepository.findByAvailable(Boolean.TRUE);
            Map<ProductCategory, List<Product>> categorizedProducts = products.stream()
                    .collect(Collectors.groupingBy(Product::getCategory));

            for (Map.Entry<ProductCategory, List<Product>> entry : categorizedProducts.entrySet()) {
                XWPFParagraph categoryTitle = document.createParagraph();
                XWPFRun categoryRun = categoryTitle.createRun();
                categoryRun.setText(entry.getKey().name());
                categoryRun.setBold(true);
                categoryRun.setFontSize(16);

                for (Product product : entry.getValue()) {
                    XWPFParagraph productParagraph = document.createParagraph();
                    XWPFRun productRun = productParagraph.createRun();
                    productRun.setText(product.getFantasyName() + " - $" + product.getPrice());
                    productRun.setFontSize(12);
                }
            }

            document.write(outputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
        LOGGER.debug("DOCX menu generated");
    }
}
